<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.mule.examples</groupId>
        <artifactId>mule-example-bookstore-parent</artifactId>
        <version>1.0</version>
    </parent>
    <artifactId>mule-example-bookstore-admin-webapp</artifactId>
    <packaging>war</packaging>
    <name>Bookstore Example: Admin Webapp</name>
    <description>This is a webapp which runs inside the firewall and is used to manage the inventory of the bookstore.</description>

    <properties>
        <webappName>bookstore-admin</webappName>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <warName>${webappName}</warName>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>tomcat-maven-plugin</artifactId>
                <version>1.0-beta-1</version>
                <configuration>
                    <path>/</path>
                    <port>8889</port>
                </configuration>
            </plugin>

        </plugins>

    </build>

    <dependencies>
        <!-- Bookstore domain objects + interfaces -->
        <dependency>
            <groupId>org.mule.examples</groupId>
            <artifactId>mule-example-bookstore-api</artifactId>
            <version>${version}</version>
        </dependency>

        <!-- Contains MuleXmlBuilderContextListener -->
        <dependency>
            <groupId>org.mule.modules</groupId>
            <artifactId>mule-module-builders</artifactId>
            <version>${muleVersion}</version>
        </dependency>

        <!-- Transports used by the Mule config -->
        <dependency>
            <groupId>org.mule.transports</groupId>
            <artifactId>mule-transport-servlet</artifactId>
            <version>${muleVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.mule.transports</groupId>
            <artifactId>mule-transport-cxf</artifactId>
            <version>${muleVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.mule.transports</groupId>
            <artifactId>mule-transport-email</artifactId>
            <version>${muleVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.mule.transports</groupId>
            <artifactId>mule-transport-vm</artifactId>
            <version>${muleVersion}</version>
        </dependency>

        <!-- CXF assumes you have an XSLT engine available -->
        <dependency>
            <groupId>xalan</groupId>
            <artifactId>xalan</artifactId>
            <version>${xalanVersion}</version>
        </dependency>
        <dependency>
            <groupId>xalan</groupId>
            <artifactId>serializer</artifactId>
            <version>${xalanVersion}</version>
        </dependency>

        <!-- Unit tests -->
        <dependency>
            <groupId>org.mule.tests</groupId>
            <artifactId>mule-tests-functional</artifactId>
            <version>${muleVersion}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mule.modules</groupId>
            <artifactId>mule-module-client</artifactId>
            <version>${muleVersion}</version>
            <scope>test</scope>
        </dependency>
        <!-- The Servlet API will be provided by the web server when the webapp 
            is actually deployed, but we need to provide it ourselves for unit 
            testing -->
        <dependency>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>servlet-api-2.5</artifactId>
            <version>${jettyVersion}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
