<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:http="http://www.mulesource.org/schema/mule/http/2.2" xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
	xmlns:stdio="http://www.mulesource.org/schema/mule/stdio/2.2"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jms="http://www.mulesource.org/schema/mule/jms/2.2"
	xmlns:scripting="http://www.mulesource.org/schema/mule/scripting/2.2"
	xmlns:https="http://www.mulesource.org/schema/mule/https/2.2"
	xsi:schemaLocation="
			http://www.mulesource.org/schema/mule/scripting/2.2	http://www.mulesource.org/schema/mule/scripting/2.2/mule-scripting.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
            http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
            http://www.mulesource.org/schema/mule/http/2.2 http://www.mulesource.org/schema/mule/http/2.2/mule-http.xsd
            http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
            http://www.mulesource.org/schema/mule/stdio/2.2 http://www.mulesource.org/schema/mule/stdio/2.2/mule-stdio.xsd
            http://www.mulesource.org/schema/mule/jms/2.2 http://www.mulesource.org/schema/mule/jms/2.2/mule-jms.xsd
            http://www.mulesource.org/schema/mule/https/2.2 http://www.mulesource.org/schema/mule/https/2.2/mule-https.xsd">


	<description></description>
	<spring:beans>
		<spring:import resource="spring_plash.xml" />
	</spring:beans>
	<spring:bean id="LoginComponent"
		class="tw.edu.sinica.iis.ants.components.LoginComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	<spring:bean id="FriendListComponent"
		class="tw.edu.sinica.iis.ants.components.FriendListComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	<!-- 
	<spring:bean id="ActivateComponent"
		class="tw.edu.sinica.iis.ants.components.ActivateComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	-->
	<!-- (Step 1) Danny: XXXXX = ConfirmFriendRequest -->
	<spring:bean id="ConfirmFriendRequestComponent"
		class="tw.edu.sinica.iis.ants.components.ConfirmFriendRequestComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	<!-- (Step 1) Danny: XXXXX = FriendRequest -->
	<spring:bean id="FriendRequestComponent"
		class="tw.edu.sinica.iis.ants.components.FriendRequestComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	<!-- (Step 1) Danny: XXXXX = Register -->
	<spring:bean id="RegisterComponent"
		class="tw.edu.sinica.iis.ants.components.RegisterComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	<!-- (Step 1) Danny: XXXXX = Activate -->
	<spring:bean id="ActivateComponent"
		class="tw.edu.sinica.iis.ants.components.ActivateComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	<!-- (Step 1) Danny: XXXXX = Login2 -->
	<spring:bean id="Login2Component"
		class="tw.edu.sinica.iis.ants.components.Login2Component">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	<!-- (Step 1) Danny: XXXXX = PasswordChange -->
	<spring:bean id="PasswordChangeComponent"
		class="tw.edu.sinica.iis.ants.components.PasswordChangeComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	
	
	<spring:bean id="PeopleLocationsComponent"
		class="tw.edu.sinica.iis.ants.components.PeopleLocationsComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	<spring:bean id="NearestComponent"
		class="tw.edu.sinica.iis.ants.components.NearestComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	<spring:bean id="TestComponent"
		class="tw.edu.sinica.iis.ants.components.TestComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	<!-- 
		Step 1: Make a spring bean for your customized component
		
		Please put your customized component in the "tw.edu.sinica.iis.ants.components" package, 
		and replace the "id" attribute, which is XXXXXCompoent, with your customized component name 
	-->
	<!--
	<spring:bean id="XXXXXComponent"
		class="tw.edu.sinica.iis.ants.components.XXXXXComponent">
		<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>
	</spring:bean>
	-->
	

	<jms:activemq-connector name="jmsCon"
		specification="1.1" brokerURL="tcp://localhost:61616">
		<spring:property name="disableTemporaryReplyToDestinations"
			value="true" />
	</jms:activemq-connector>

	<jms:endpoint name="plashWaitingQueue" queue="plash.watingQueue"
		connector-ref="jmsCon" />
	
	<jms:endpoint name="plashLoginQueue" queue="plash.login"
		connector-ref="jmsCon" />
	
	<jms:endpoint name="plashFriendListQueue" queue="plash.friend.list"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashPeopleLocationsQueue" queue="plash.people.locations"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashNearestQueue" queue="plash.nearest"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashResponseQueue" queue="plash.response"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashTestResponseQueue" queue="plash.test.response"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashLogQueue" queue="plash.log"
		connector-ref="jmsCon" />
	
	<!-- (Step 2) Danny: XXXXX = ConfirmFriendRequest -->
	<jms:endpoint name="plashConfirmFriendRequestResponseQueue" queue="plash.test.responseConfirmFriendRequest"
		connector-ref="jmsCon" />

	<!-- (Step 2) Danny: XXXXX = FriendRequest -->
	<jms:endpoint name="plashFriendRequestResponseQueue" queue="plash.test.responseFriendRequest"
		connector-ref="jmsCon" />

	<!-- (Step 2) Danny: XXXXX = Register -->
	<jms:endpoint name="plashRegisterResponseQueue" queue="plash.test.responseRegister"
		connector-ref="jmsCon" />

	<!-- (Step 2) Danny: XXXXX = Activate -->
	<jms:endpoint name="plashActivateResponseQueue" queue="plash.test.responseActivate"
		connector-ref="jmsCon" />
		
	<!-- (Step 2) Danny: XXXXX = Login2 -->
	<jms:endpoint name="plashLogin2ResponseQueue" queue="plash.test.responseLogin2"
		connector-ref="jmsCon" />
		
	<!-- (Step 2) Danny: XXXXX = PasswordChange -->
	<jms:endpoint name="plashPasswordChangeResponseQueue" queue="plash.test.responsePasswordChange"
		connector-ref="jmsCon" />	
	
	<!-- 
		Step 2: Create a response queue for your component
		
		Please replace the "name" attribute with one you like, which is plashXXXXXResponseQueue in this example, to be the reference for latter use.
		Please replace the "queue" attribute with one you like, which is plash.test.responseXXXXX in this example, for the actual name in ActiveMQ.
	-->
	<jms:endpoint name="plashXXXXXResponseQueue" queue="plash.test.responseXXXXX"
		connector-ref="jmsCon" />

	<custom-transformer name="ExceptionToString"
		class="tw.edu.sinica.iis.ants.ExceptionToString" />


	<custom-transformer name="HttpParams"
		class="tw.edu.sinica.iis.ants.PlashHTTPTransformer" />
	<message-properties-transformer name="HttpResponse">
		<add-message-property key="Content-Type" value="text/html" />
		<add-message-property key="http.status" value="303" />
	</message-properties-transformer>

	<custom-transformer class="tw.edu.sinica.iis.ants.ResponseTransform"
		name="rt" />

	<https:connector name="httpsConnector">
		<https:tls-key-store path="file:/home/kennywu/tmpKey/keystore" keyPassword="password" storePassword="password"/>
	</https:connector>
	<https:endpoint name="plashHttpsInboundEndpoint" host="localhost"
		port="11111" path="in" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashTestHttpsInboundEndpoint" host="localhost"
		port="12345" path="in" synchronous="true" connector-ref="httpsConnector" />
	<!-- 
		Step 3: Create a HTTPS endpoint for your component
		
		Please replace the "name" attribute with one you like, which is OOOOOOO in this example, to be the reference for the latter use.
		Please replace the "port" attribute with one you like, which can be the same with other HTTPS endpoint but the system default port (ie. 22, 80, 8080, etc.).
		Please replace the "path" attribute with one you like.
		
		After all steps are setup, you can access your component through the following link:
		
		https://localhost:{port}/{path}?{Parameters}
		
		which will be
		
		https://localhost:12345/PPPPPPP?parameter1=value1&parameter2=value2&... 
		
		for the following example.
	-->
	<!--
	<https:endpoint name="plashxxxxxHttpsInboundEndpoint" host="localhost"
		port="12345" path="PPPPPPP" synchronous="true" connector-ref="httpsConnector" />
	-->
	
	<!-- 
	<https:endpoint name="plashXXXXXHttpsInboundEndpoint" host="localhost"
		port="12345" path="XXXXX" synchronous="true" connector-ref="httpsConnector" />
	 -->
	
	<!-- (Step 3) Danny: XXXXX = ConfirmFriendRequest -->
	<https:endpoint name="plashConfirmFriendRequestHttpsInboundEndpoint" host="localhost"
		port="12345" path="ConfirmFriendRequest" synchronous="true" connector-ref="httpsConnector" />
	
	<!-- (Step 3) Danny: XXXXX = FriendRequest -->
	<https:endpoint name="plashFriendRequestHttpsInboundEndpoint" host="localhost"
		port="12345" path="FriendRequest" synchronous="true" connector-ref="httpsConnector" />
	
	<!-- (Step 3) Danny: XXXXX = Register -->
	<https:endpoint name="plashRegisterHttpsInboundEndpoint" host="localhost"
		port="12345" path="Register" synchronous="true" connector-ref="httpsConnector" />
	
	<!-- (Step 3) Danny: XXXXX = Activate -->	
	<https:endpoint name="plashActivateHttpsInboundEndpoint" host="localhost"
		port="12345" path="Activate" synchronous="true" connector-ref="httpsConnector" />
		
	<!-- (Step 3) Danny: XXXXX = Login2 -->	
	<https:endpoint name="plashLogin2HttpsInboundEndpoint" host="localhost"
		port="12345" path="Login2" synchronous="true" connector-ref="httpsConnector" />
	
	<!-- (Step 3) Danny: XXXXX = PasswordChange -->	
	<https:endpoint name="plashPasswordChangeHttpsInboundEndpoint" host="localhost"
		port="12345" path="PasswordChange" synchronous="true" connector-ref="httpsConnector" />
		
	<byte-array-to-string-transformer name="byteArrayToString" />
	<custom-transformer class="tw.edu.sinica.iis.ants.CustomByteArrayToString"
		name="bt" />


	<model name="PLASH">
		<!-- 
			Step 4: Combine all the things: Create a service for your component
			
			Please replace the "name" attribute in the "service" tag, which is XXXXXService in this example, to be the name of the service.
			Please replace the "ref" attribute in the "spring-object", which is OOOOOOO in this example. This should be exactly the same with the "name" in "https:endpoint" you set in step 3.
			Please replace the "bean" attribute in the "inbound-endpoint", which is XXXXXComponent in this example. This should be exactly the same with the "id" in "spring:bean" you set in step 1.
			Please replace the "ref" attribute in the "outbound-endpoint", which is plashXXXXXResponseQueue in this example. This should be exactly the same with the "name" in "jms:endpoint" you set in step 2.
			Please replace the "ref" attribute in the "inbound-endpoint", which is plashXXXXXResponseQueue in this example. This should be exactly the same with the "name" in "jms:endpoint" you set in step 2.
			
			Finally, run the mule and you could start to test it!
		-->
		<!--
		<service name="XXXXXService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="OOOOOOO" />
			</inbound>			
			<component>
				<spring-object bean="XXXXXComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashXXXXXResponseQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashXXXXXResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="rt" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		-->
		
		<service name="TestHttpInput">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashTestHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="TestComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashTestResponseQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashTestResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="rt" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>


		<service name="HttpInput">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashHttpsInboundEndpoint" />
			</inbound>
			<component class="tw.edu.sinica.iis.ants.components.RequestPreProcess" />
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashWaitingQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="rt" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
				<!--<collection-async-reply-router />-->
			</async-reply>
		</service>
		
		
		<service name="RouteService">
			<inbound>
				<inbound-endpoint ref="plashWaitingQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
					</transformers>
				</inbound-endpoint>
			</inbound>
			<outbound>
				<custom-outbound-router class="tw.edu.sinica.iis.ants.MyRouter">
					<outbound-endpoint ref="plashLoginQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
					<outbound-endpoint ref="plashFriendListQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
					<outbound-endpoint ref="plashPeopleLocationsQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
					<outbound-endpoint ref="plashNearestQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
					<outbound-endpoint ref="plashResponseQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
					<outbound-endpoint ref="plashLogQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
					<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>					
				</custom-outbound-router>
			</outbound>
		</service>
 
		<service name="LoginService">
			<inbound>
				<inbound-endpoint ref="plashLoginQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
					</transformers>
				</inbound-endpoint>
			</inbound>
			<component>
				<spring-object bean="LoginComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashWaitingQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>
 
		<service name="FriendListService">
			<inbound>
				<inbound-endpoint ref="plashFriendListQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
					</transformers>
				</inbound-endpoint>
			</inbound>
			<component>
				<spring-object bean="FriendListComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashWaitingQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>

		<service name="PeopleLocationsService">
			<inbound>
				<inbound-endpoint ref="plashPeopleLocationsQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
					</transformers>
				</inbound-endpoint>
			</inbound>
			<component>
				<spring-object bean="PeopleLocationsComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashWaitingQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>


		<service name="NearestService">
			<inbound>
				<inbound-endpoint ref="plashNearestQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
					</transformers>
				</inbound-endpoint>
			</inbound>
			<component>
				<spring-object bean="NearestComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashWaitingQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>
		
		<service name="UserErrorHandler">
			<inbound>
				<vm:inbound-endpoint path="userErrorHandler"
					responseTransformer-refs="ExceptionToString" synchronous="true" />
			</inbound>
		</service>

		<service name="SystemErrorHandler">
			<inbound>
				<vm:inbound-endpoint path="systemErrorHandler"
					synchronous="true" />
			</inbound>

			<outbound>
				<pass-through-router>
					<stdio:outbound-endpoint system="ERR" />
				</pass-through-router>
			</outbound>
		</service>
		
		<!-- (Step 4) Danny: Example -->
		<!-- 
		<service name="XXXXXService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashXXXXXHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="XXXXXComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashXXXXXResponseQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashXXXXXResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="rt" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		-->
		
		
		<!-- (Step 4) Danny: XXXXX = ConfirmFriendRequest -->
		<service name="ConfirmFriendRequestComponentService">
			
			<!-- Ref. Step 3 -->
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashConfirmFriendRequestHttpsInboundEndpoint" />
			</inbound>			
			
			<!-- Ref. Step 1 -->
			<component>
				<spring-object bean="ConfirmFriendRequestComponent"></spring-object>
			</component>
			
			<!-- Ref. Step 2 -->
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashConfirmFriendRequestResponseQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			
			<!-- Ref. Step 2 -->
			<async-reply>
				<inbound-endpoint ref="plashConfirmFriendRequestResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="rt" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Danny: XXXXX = FriendRequest -->
		<service name="FriendRequestService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashFriendRequestHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="FriendRequestComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashFriendRequestResponseQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashFriendRequestResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="rt" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Danny: XXXXX = Register -->
		<service name="RegisterService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashRegisterHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="RegisterComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashRegisterResponseQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashRegisterResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="rt" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Danny: XXXXX = Activate -->
		<service name="ActivateService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashActivateHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="ActivateComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashActivateResponseQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashActivateResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="rt" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Danny: XXXXX = Login2 -->
		<service name="Login2Service">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashLogin2HttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="Login2Component"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashLogin2ResponseQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashLogin2ResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="rt" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Danny: XXXXX = PasswordChange -->
		<service name="PasswordChangeService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashPasswordChangeHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="PasswordChangeComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashPasswordChangeResponseQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashPasswordChangeResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="rt" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
	</model>

</mule>
