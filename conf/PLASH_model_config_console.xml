<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:http="http://www.mulesource.org/schema/mule/http/2.2" xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
	xmlns:stdio="http://www.mulesource.org/schema/mule/stdio/2.2"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jms="http://www.mulesource.org/schema/mule/jms/2.2"
	xmlns:scripting="http://www.mulesource.org/schema/mule/scripting/2.2"
	xmlns:https="http://www.mulesource.org/schema/mule/https/2.2"
	xmlns:management="http://www.mulesource.org/schema/mule/management/2.2" 
	xsi:schemaLocation="
			http://www.mulesource.org/schema/mule/scripting/2.2	http://www.mulesource.org/schema/mule/scripting/2.2/mule-scripting.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
            http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
            http://www.mulesource.org/schema/mule/http/2.2 http://www.mulesource.org/schema/mule/http/2.2/mule-http.xsd
            http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
            http://www.mulesource.org/schema/mule/stdio/2.2 http://www.mulesource.org/schema/mule/stdio/2.2/mule-stdio.xsd
            http://www.mulesource.org/schema/mule/jms/2.2 http://www.mulesource.org/schema/mule/jms/2.2/mule-jms.xsd
            http://www.mulesource.org/schema/mule/https/2.2 http://www.mulesource.org/schema/mule/https/2.2/mule-https.xsd
			http://www.mulesource.org/schema/mule/management/2.2 
			http://www.mulesource.org/schema/mule/management/2.2/mule-management.xsd"            
            >


	<description></description>

	
	
	<management:jmx-default-config port="8086" >
		<management:credentials>
		<spring:entry key="admin"
			value="password" />
		</management:credentials>
	</management:jmx-default-config>
	<management:jmx-mx4j-adaptor
		jmxAdaptorUrl="http://localhost:8088"
		login="admin"
		password="password" />		
		
	<spring:beans>
		<spring:import resource="PLASH_db_config.xml" />
		<spring:import resource="PLASH_spring_bean_components.xml" />
		<spring:import resource="PLASH_transformers_config.xml" />
		<spring:import resource="./legacycomponents/GetUsernameListConfig.xml" />
		<spring:import resource="./legacycomponents/GetTripDataConfig.xml" />
		<spring:import resource="./legacycomponents/GetNewTripIDConfig.xml" />
		<spring:import resource="./legacycomponents/GetTripAuthDataConfig.xml"/>	
		<spring:import resource="./legacycomponents/GetTripInfoConfig.xml"/>		
		<spring:import resource="./legacycomponents/GetLatestTripConfig.xml"/>						
		<spring:import resource="./legacycomponents/InputTripInfoConfig.xml"/>
		<spring:import resource="./legacycomponents/InputTripDataConfig.xml"/>	
		<spring:import resource="./legacycomponents/SetAuthFriendConfig.xml"/>
		<spring:import resource="./legacycomponents/SetLoginConfig.xml"/>		
		<spring:import resource="./legacycomponents/TripInfoManagerConfig.xml"/>
		<spring:import resource="./legacycomponents/DelAuthFriendConfig.xml" />
		<spring:import resource="./legacycomponents/DelTripConfig.xml" />
		<spring:import resource="./legacycomponents/NearbyTripConfig.xml" />		
		<spring:import resource="./legacycomponents/TestConfig.xml" />
		<spring:import resource="./legacycomponents/NewLinkusUserInfoConfig.xml" />
		<spring:import resource="./legacycomponents/NewLinkusPhotosConfig.xml" />
		<spring:import resource="./legacycomponents/NewLinkusLocationsConfig.xml" />
		<spring:import resource="./legacycomponents/GetLinkusUserConfig.xml" />
		<spring:import resource="./legacycomponents/NewLinkusInteractionConfig.xml" />

		<spring:import resource="./common_data_access_beanconfig/NewTrajectoryPointConfig.xml" />		
		<spring:import resource="./common_data_access_beanconfig/NewTrajectoryInfoConfig.xml" />
		<spring:import resource="./common_data_access_beanconfig/NewUserSpecifiedConfig.xml" />
	</spring:beans>

	
	
	<jms:activemq-connector name="jmsCon"
		specification="1.1" brokerURL="tcp://localhost:61616">
		<spring:property name="disableTemporaryReplyToDestinations"
			value="true" />
	</jms:activemq-connector>
	
	<jms:endpoint name="plashWaitingQueue" queue="plash.watingQueue"
		connector-ref="jmsCon" />		
	<jms:endpoint name="plashResponseQueue" queue="plash.response"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashLogQueue" queue="plash.log"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashLoginQueue" queue="plash.login"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetFriendListQueue" queue="plash.get.friend.list"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashGetAllFriendLocationQueue" queue="plash.get.all.friend.locations"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashNearestQueue" queue="plash.nearest"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashConfirmFriendRequestQueue" queue="plash.ConfirmFriendRequest"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashFriendRequestQueue" queue="plash.FriendRequest"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashRegisterQueue" queue="plash.Register"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashActivateQueue" queue="plash.Activate"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashLogin2Queue" queue="plash.Login2"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashPasswordChangeQueue" queue="plash.PasswordChange"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashInputQueue" queue="plash.input"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetTripIdQueue" queue="plash.get.trip.id"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetFriendLatestTripQueue" queue="plash.get.friend.latest.trip"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetFriendOneTripQueue" queue="plash.get.friend.one.trip"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetUserTripIdQueue" queue="plash.get.user.trip.id"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashDistanceBearingQueue" queue="plash.distance.bearing"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetAuthTripLatLngQueue" queue="plash.get.auth.trip.lat.lng"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashRetrieveUserInfoQueue" queue="plash.retrieve.user.info"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetActivityQueue" queue="plash.get.activity"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashSetActivityQueue" queue="plash.set.activity"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashSetAttendActivityQueue" queue="plash.set.attend.activity"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashDelAttendActivityQueue" queue="plash.del.attend.activity"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashSetItemQueue" queue="plash.set.item"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetItemQueue" queue="plash.get.item"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashDelItemQueue" queue="plash.del.item"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashSetAssignItemQueue" queue="plash.set.assign.item"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetAssignedItemInfoOfUserQueue" queue="plash.get.assigned.item.info.user"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashDelAssignItemQueue" queue="plash.del.assign.item"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetUsersAttendActivityQueue" queue="plash.get.users.attend.activity"
		connector-ref="jmsCon" />	
			
	<!-- Yu-Hsiang add  -->
	<jms:endpoint name="plashGetNewTripId2Queue" queue="plash.get.new.trip.id2"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashInput2Queue" queue="plash.input2"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashFacebookLoginQueue" queue="plash.facebooklogin"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashFacebookRegisterQueue" queue="plash.FacebookRegister"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashGetCheckInDataQueue" queue="plash.get.check.in.data"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashUploadTripQueue" queue="plash.upload.trip"
		connector-ref="jmsCon" />					
	<jms:endpoint name="plashSignUpQueue" queue="plash.sign.up"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashGetFriendRequestListQueue" queue="plash.get.friend.request.list"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashGetAllUserListQueue" queue="plash.get.all.user.list"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashGetTripShareUserQueue" queue="plash.get.trip.share.user"
		connector-ref="jmsCon" />	
	<jms:endpoint name="plashGetPublicTripInfoQueue" queue="plash.get.public.trip.info"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashGetAuthTripInfoQueue" queue="plash.get.auth.trip.info"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashUploadTripCompleteQueue" queue="plash.upload.trip.complete"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashCheckServerStatusQueue" queue="plash.check.server.status"
		connector-ref="jmsCon" />
	<jms:endpoint name="plashLocationSharingQueue" queue="plash.location.sharing"
		connector-ref="jmsCon" />

		
	<https:connector name="httpsConnector">
		<https:tls-key-store path="file:///home/ants/workspace/PLASH_Platform_Test_Combine/resources/tmpKey/plash.keystore" keyPassword="password" storePassword="password"/>
	</https:connector>

	

	<!-- 
		Step 3: Create a HTTPS endpoint for your component
		
		Please replace the "name" attribute with one you like, which is OOOOOOO in this example, to be the reference for the latter use.
		Please replace the "port" attribute with one you like, which can be the same with other HTTPS endpoint but the system default port (ie. 22, 80, 8080, etc.).
		Please replace the "path" attribute with one you like.
		
		After all steps are setup, you can access your component through the following link:
		
		https://localhost:{port}/{path}?{Parameters}
		
		which will be
		
		https://localhost:12345/PPPPPPP?parameter1=value1&parameter2=value2&... 
		
		for the following example.
	-->
	
	<https:endpoint name="plashConfirmFriendRequestHttpsInboundEndpoint" host="localhost"
		port="8080" path="ConfirmFriendRequest" synchronous="true" connector-ref="httpsConnector" />
	
	<https:endpoint name="plashFriendRequestHttpsInboundEndpoint" host="localhost"
		port="8080" path="FriendRequest" synchronous="true" connector-ref="httpsConnector" />
	
	<https:endpoint name="plashRegisterHttpsInboundEndpoint" host="localhost"
		port="8080" path="Register" synchronous="true" connector-ref="httpsConnector" />
	
	<!-- (Step 3) Danny: XXXXX = Activate -->	
	<https:endpoint name="plashActivateHttpsInboundEndpoint" host="localhost"
		port="8080" path="Activate" synchronous="true" connector-ref="httpsConnector" />
		
	<!-- (Step 3) Danny: XXXXX = Login2 -->	
	<https:endpoint name="plashLogin2HttpsInboundEndpoint" host="localhost"
		port="8080" path="Login2" synchronous="true" connector-ref="httpsConnector" />
	
	<!-- (Step 3) Danny: XXXXX = PasswordChange -->	
	<https:endpoint name="plashPasswordChangeHttpsInboundEndpoint" host="localhost"
		port="8080" path="PasswordChange" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashInputHttpsInboundEndpoint" host="localhost"
		port="8080" path="Input" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetTripIdHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetTripId" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetFriendLatestTripHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetFriendLatestTrip" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetFriendOneTripHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetFriendOneTrip" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetUserTripIdHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetUserTripId" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashDistanceBearingHttpsInboundEndpoint" host="localhost"
		port="8080" path="DistanceBearing" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetFriendListHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetFriendList" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetAllFriendLocationHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetAllFriendLocation" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetAuthTripLatLngHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetAuthTripLatLng" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashLoginHttpsInboundEndpoint" host="localhost"
		port="8080" path="Login" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashRetrieveUserInfoHttpsInboundEndpoint" host="localhost"
		port="8080" path="RetrieveUserInfo" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashNearestHttpsInboundEndpoint" host="localhost"
		port="8080" path="Nearest" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashSetActivityHttpsInboundEndpoint" host="localhost"
		port="8080" path="SetActivity" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetActivityHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetActivity" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashSetAttendActivityHttpsInboundEndpoint" host="localhost"
		port="8080" path="SetAttendActivity" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashDelAttendActivityHttpsInboundEndpoint" host="localhost"
		port="8080" path="DelAttendActivity" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashSetItemHttpsInboundEndpoint" host="localhost"
		port="8080" path="SetItem" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetItemHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetItem" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashDelItemHttpsInboundEndpoint" host="localhost"
		port="8080" path="DelItem" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashSetAssignItemHttpsInboundEndpoint" host="localhost"
		port="8080" path="SetAssignItem" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetAssignedItemInfoOfUserHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetAssignedItemInfoOfUser" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashDelAssignItemHttpsInboundEndpoint" host="localhost"
		port="8080" path="DelAssignItem" synchronous="true" connector-ref="httpsConnector" />
		
	<https:endpoint name="plashGetUsersAttendActivityHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetUsersAttendActivity" synchronous="true" connector-ref="httpsConnector" />
		

	<https:endpoint name="plashPlatformInboundEndpoint" host="localhost"
		port="8080" path="plashPlatform" synchronous="true" connector-ref="httpsConnector" />


		
	<https:endpoint name="plashHttpsInboundEndpoint" host="localhost"
		port="11111" path="in" synchronous="true" connector-ref="httpsConnector" />
	
	<!-- Yu-Hsiang add HTTP endpoint -->
	<http:endpoint name="plashInputHttpInboundEndpoint" host="localhost"
		port="8081" path="Input2" synchronous="true" />
	<http:endpoint name="plashGetNewTripIdHttpInboundEndpoint" host="localhost"
		port="8081" path="GetNewTripId2" synchronous="true" />
	<https:endpoint name="plashFacebookLoginHttpsInboundEndpoint" host="localhost"
		port="8080" path="FacebookLogin" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashFacebookRegisterHttpsInboundEndpoint" host="localhost"
		port="8080" path="FacebookRegister" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashGetCheckInDataHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetCheckInData" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashUploadTripHttpsInboundEndpoint" host="localhost" method="POST"
		port="8080" path="UploadTrip" synchronous="true" connector-ref="httpsConnector" />		
	<https:endpoint name="plashSignUpHttpsInboundEndpoint" host="localhost"
		port="8080" path="SignUp" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashGetFriendRequestListHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetFriendRequestList" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashGetAllUserListHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetAllUserList" synchronous="true" connector-ref="httpsConnector" />			
	<https:endpoint name="plashGetTripShareUserHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetTripShareUser" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashGetPublicTripInfoHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetPublicTripInfo" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashGetAuthTripInfoHttpsInboundEndpoint" host="localhost"
		port="8080" path="GetAuthTripInfoComponent" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashUploadTripCompleteHttpsInboundEndpoint" host="localhost"
		port="8080" path="UploadTripComplete" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashCheckServerStatusHttpsInboundEndpoint" host="localhost"
		port="8080" path="CheckServerStatus" synchronous="true" connector-ref="httpsConnector" />
	<https:endpoint name="plashLocationSharingHttpsInboundEndpoint" host="localhost"
		port="8080" path="LocationSharing" synchronous="true" connector-ref="httpsConnector" />



	<model name="PLASH">
	
		<!-- 
			Step 4: Combine all the things: Create a service for your component
			
			Please replace the "name" attribute in the "service" tag, which is XXXXXService in this example, to be the name of the service.
			Please replace the "ref" attribute in the "spring-object", which is OOOOOOO in this example. This should be exactly the same with the "name" in "https:endpoint" you set in step 3.
			Please replace the "bean" attribute in the "inbound-endpoint", which is XXXXXComponent in this example. This should be exactly the same with the "id" in "spring:bean" you set in step 1.
			Please replace the "ref" attribute in the "outbound-endpointLocationSharing", which is plashXXXXXResponseQueue in this example. This should be exactly the same with the "name" in "jms:endpoint" you set in step 2.
			Please replace the "ref" attribute in the "inbound-endpoint", which is plashXXXXXResponseQueue in this example. This should be exactly the same with the "name" in "jms:endpoint" you set in step 2.
			
			Finally, run the mule and you could start to test it!
		-->


		
		<service name="HttpInput">
			<inbound>
				<inbound-endpoint transformer-refs="PlashPlatformTransformer"
					responseTransformer-refs="byteArrayToString" ref="plashPlatformInboundEndpoint" />
			</inbound>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashWaitingQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashResponseQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<service name="RouteService">
			<inbound>
				<inbound-endpoint ref="plashWaitingQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
					</transformers>
				</inbound-endpoint>
			</inbound>
			<outbound>
				<custom-outbound-router class="tw.edu.sinica.iis.ants.MyRouter">
					<outbound-endpoint ref="plashLoginQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
					<outbound-endpoint ref="plashGetFriendListQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
					<spring:property name="sessionFactory" ref="GeoSessionFactory"></spring:property>					
				</custom-outbound-router>
			</outbound>
		</service>
	

		<service name="UserErrorHandler">
			<inbound>
				<vm:inbound-endpoint path="userErrorHandler"
					responseTransformer-refs="ExceptionToString" synchronous="true" />
			</inbound>
		</service>

		<service name="SystemErrorHandler">
			<inbound>
				<vm:inbound-endpoint path="systemErrorHandler"
					synchronous="true" />
			</inbound>

			<outbound>
				<pass-through-router>
					<stdio:outbound-endpoint system="ERR" />
				</pass-through-router>
			</outbound>
		</service>
		

		
		
		<!-- (Step 4) Danny: XXXXX = ConfirmFriendRequest -->
		<service name="ConfirmFriendRequestComponentService">
			
			<!-- Ref. Step 3 -->
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashConfirmFriendRequestHttpsInboundEndpoint" />
			</inbound>			
			
			<!-- Ref. Step 1 -->
			<component>
				<spring-object bean="ConfirmFriendRequestComponent"></spring-object>
			</component>
			
			<!-- Ref. Step 2 -->
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashConfirmFriendRequestQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			
			<!-- Ref. Step 2 -->
			<async-reply>
				<inbound-endpoint ref="plashConfirmFriendRequestQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Danny: XXXXX = FriendRequest -->
		<service name="FriendRequestService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashFriendRequestHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="FriendRequestComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashFriendRequestQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashFriendRequestQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Danny: XXXXX = Register -->
		<service name="RegisterService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashRegisterHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="RegisterComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashRegisterQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashRegisterQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>

		<service name="SetLoginService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashSetLoginHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="SetLoginComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashSetLoginQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashSetLoginQueue">
					<transformers>
						<transformer ref="PlashPlatformTransformer" />
						<jms:jmsmessage-to-object-transformer />

					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Danny: XXXXX = Activate -->
		<service name="ActivateService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashActivateHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="ActivateComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashActivateQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashActivateQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="PlashPlatformTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Danny: XXXXX = Login2 -->
		<service name="Login2Service">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashLogin2HttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="Login2Component"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashLogin2Queue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashLogin2Queue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="PlashPlatformTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Danny: XXXXX = PasswordChange -->
		<service name="PasswordChangeService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashPasswordChangeHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="PasswordChangeComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashPasswordChangeQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashPasswordChangeQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		
		<service name="InputService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashInputHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="InputComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashInputQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashInputQueue">
					<transformers>
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>

		<service name="InputTripDataService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashInputTripDataHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="InputTripDataComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashInputTripDataQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashInputTripDataQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
				

		<service name="GetLatestTripService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetLatestTripHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetLatestTripComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetLatestTripQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetLatestTripQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="PlashPlatformTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>

		<service name="GetTripDataService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetTripDataHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetTripDataComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetTripDataQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetTripDataQueue">
					<transformers>
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  GetNewTripId-->
		<service name="GetNewTripIdService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetNewTripIdHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetNewTripIdComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetNewTripIdQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetNewTripIdQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="PlashPlatformTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		

		<service name="GetTripIdService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetTripIdHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetTripIdComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetTripIdQueue">
						<transformers>
							<transformer ref="TestResponseTransformer" />	
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  GetFriendLatestTrip-->
		<service name="GetFriendLatestTripService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetFriendLatestTripHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetFriendLatestTripComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetFriendLatestTripQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetFriendLatestTripQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="PlashPlatformTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  GetFriendOneTrip-->
		<service name="GetFriendOneTripService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetFriendOneTripHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetFriendOneTripComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetFriendOneTripQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetFriendOneTripQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="PlashPlatformTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  GetUserTripId-->
		<service name="GetUserTripIdService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetUserTripIdHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetUserTripIdComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetUserTripIdQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetUserTripIdQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="PlashPlatformTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  DistanceBearing-->
		<service name="DistanceBearingService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashDistanceBearingHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="DistanceBearingComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashDistanceBearingQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashDistanceBearingQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  GetFriendList-->
		<service name="GetFriendListService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetFriendListHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetFriendListComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetFriendListQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetFriendListQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="PlashPlatformTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  GetAllFriendLocation-->
		<service name="GetAllFriendLocationService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetAllFriendLocationHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetAllFriendLocationComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetAllFriendLocationQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetAllFriendLocationQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>

		
		<service name="GetTripAuthDataService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetTripAuthDataHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetTripAuthDataComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetTripAuthDataQueue">
						<transformers>
						
							<transformer ref="TestResponseTransformer" />						
							<jms:object-to-jmsmessage-transformer />
							

						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetTripAuthDataQueue">
					<transformers>
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>				
		</service>


		<service name="SetAuthFriendService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashSetAuthFriendHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="SetAuthFriendComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashSetAuthFriendQueue">
						<transformers>
							<transformer ref="TestResponseTransformer" />
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashSetAuthFriendQueue">
					<transformers>
						
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  DelAuthFriend-->
		<service name="DelAuthFriendService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashDelAuthFriendHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="DelAuthFriendComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashDelAuthFriendQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashDelAuthFriendQueue">
					<transformers>
				
					
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>

		<!-- (Step 4) Kenny: XXXXX =  GetAuthTripLatLng-->
		<service name="GetAuthTripLatLngService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetAuthTripLatLngHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetAuthTripLatLngComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetAuthTripLatLngQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetAuthTripLatLngQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="PlashPlatformTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  Login-->
		<service name="LoginService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashLoginHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="LoginComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashLoginQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashLoginQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  Nearest-->
		<service name="NearestService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashNearestHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="NearestComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashNearestQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashNearestQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="RetrieveUserInfoService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashRetrieveUserInfoHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="RetrieveUserInfoComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashRetrieveUserInfoQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashRetrieveUserInfoQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="GetActivityService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetActivityHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetActivityComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetActivityQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetActivityQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="SetActivityService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashSetActivityHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="SetActivityComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashSetActivityQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashSetActivityQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="SetAttendActivityService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashSetAttendActivityHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="SetAttendActivityComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashSetAttendActivityQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashSetAttendActivityQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="DelAttendActivityService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashDelAttendActivityHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="DelAttendActivityComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashDelAttendActivityQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashDelAttendActivityQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="SetItemService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashSetItemHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="SetItemComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashSetItemQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashSetItemQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="GetItemService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetItemHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetItemComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetItemQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetItemQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="DelItemService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashDelItemHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="DelItemComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashDelItemQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashDelItemQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="SetAssignItemService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashSetAssignItemHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="SetAssignItemComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashSetAssignItemQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashSetAssignItemQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="GetAssignedItemInfoOfUserService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetAssignedItemInfoOfUserHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetAssignedItemInfoOfUserComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetAssignedItemInfoOfUserQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetAssignedItemInfoOfUserQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="DelAssignItemService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashDelAssignItemHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="DelAssignItemComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashDelAssignItemQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashDelAssignItemQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Kenny: XXXXX =  RetrieveUserInfo-->
		<service name="GetUsersAttendActivityService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetUsersAttendActivityHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetUsersAttendActivityComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetUsersAttendActivityQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetUsersAttendActivityQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		
		<!-- Yi-Chun: GetTripInfoService-->
		<service name="GetTripInfoService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetTripInfoHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetTripInfoComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetTripInfoQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetTripInfoQueue">
					<transformers>									
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- Yi-Chun: InputTripInfoService-->
		<service name="InputTripInfoService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashInputTripInfoHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="InputTripInfoComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashInputTripInfoQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashInputTripInfoQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />						
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
				
		<!-- Yi-Chun: TripInfoManager-->
		<service name="TripInfoManagerService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashTripInfoManagerHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="TripInfoManagerComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashTripInfoManagerResponseQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashTripInfoManagerResponseQueue">
					<transformers>
						
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		

		<service name="DelTripService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashDelTripHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="DelTripComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashDelTripResponseQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashDelTripResponseQueue">
					<transformers>

					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>

		<service name="TestService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashTestHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="TestComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashTestResponseQueue">
						<transformers>
							<transformer ref="PLASHCompToJMSTransformer"/>										
							
							<jms:object-to-jmsmessage-transformer />
							<!--
							<transformer ref="TestResponseTransformer" />
							-->
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashTestResponseQueue">
					<transformers>

					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>

	<service name="GetUsernameListService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetUsernameListHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetUsernameListComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetUsernameListQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />

						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetUsernameListQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>

		<service name="Input2Service">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashInputHttpInboundEndpoint" />
			</inbound>                        
			<component>
				<spring-object bean="InputComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashInput2Queue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>			
			<async-reply>
                                <inbound-endpoint ref="plashInput2Queue">
                                        <transformers>
                                                <jms:jmsmessage-to-object-transformer />
                                                <transformer ref="TestResponseTransformer" />
                                        </transformers>
                                </inbound-endpoint>
                                <single-async-reply-router/>                                
                        </async-reply>
		</service>

		<service name="GetNewTripId2Service">
                        <inbound>
                                <inbound-endpoint transformer-refs="HttpParams"
                                        responseTransformer-refs="byteArrayToString" ref="plashGetNewTripIdHttpInboundEndpoint" />
                        </inbound>                        
                        <component>
                                <spring-object bean="GetNewTripIdComponent"></spring-object>
                        </component>
                        <outbound>
                                <pass-through-router>
                                        <outbound-endpoint ref="plashGetNewTripId2Queue">
                                                <transformers>
                                                        <jms:object-to-jmsmessage-transformer />
                                                </transformers>
                                        </outbound-endpoint>
                                </pass-through-router>
                        </outbound>                        
			<async-reply>
                                <inbound-endpoint ref="plashGetNewTripId2Queue">
                                        <transformers>
                                                <jms:jmsmessage-to-object-transformer />
                                                <transformer ref="TestResponseTransformer" />
                                        </transformers>
                                </inbound-endpoint>
                                <single-async-reply-router/>                                
                        </async-reply> 
        </service>
			
		<service name="NewTrajectoryPointService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashNewTrajectoryPointHttpsInboundEndpoint" />
			</inbound>   		
			<component>
				<spring-object bean="NewTrajectoryPoint"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashNewTrajectoryPointQueue">
						<transformers>
				
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
	
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
				
			<async-reply>
				<inbound-endpoint ref="plashNewTrajectoryPointQueue">
					<transformers>
						
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>	
								
		</service>


		<!-- (Step 4) Yu-Hsiang: XXXXX =  FacebookLogin-->
		<service name="FacebookLoginService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashFacebookLoginHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="FacebookLoginComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashFacebookLoginQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashFacebookLoginQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		<!-- (Step 4) Yu-Hsiang: XXXXX = FacebookRegister -->
		<service name="FacebookRegisterService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashFacebookRegisterHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="FacebookRegisterComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashFacebookRegisterQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashFacebookRegisterQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Yu-Hsiang: XXXXX = GetCheckInData -->
		<service name="GetCheckInService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetCheckInDataHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetCheckinDataComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetCheckInDataQueue">
						<transformers>
							

							<jms:object-to-jmsmessage-transformer />
							 
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetCheckInDataQueue">
					<transformers>
		
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
						
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Yu-Hsiang: XXXXX = UploadTrip -->
		<service name="UploadTripService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpPostParams"
					responseTransformer-refs="byteArrayToString" ref="plashUploadTripHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="UploadTripComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashUploadTripQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashUploadTripQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		<!-- (Step 4) Yu-Hsiang: XXXXX = Sign Up -->
		<service name="SignUpService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashSignUpHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="SignUpComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashSignUpQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashSignUpQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Yu-Hsiang: XXXXX = GetFriendRequestList -->
		<service name="GetFriendRequestListService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetFriendRequestListHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetFriendRequestListComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetFriendRequestListQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetFriendRequestListQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		<!-- (Step 4) Yu-Hsiang: XXXXX = GetAllUserList -->
		<service name="GetAllUserListService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetAllUserListHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetAllUserListComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetAllUserListQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetAllUserListQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>

		<!-- (Step 4) Yu-Hsiang: XXXXX = GetAllUserList -->
		<service name="GetTripShareUserService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetTripShareUserHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetTripShareUserComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetTripShareUserQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetTripShareUserQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<!-- (Step 4) Yu-Hsiang: XXXXX = GetPublicTripInfo -->
		<service name="GetPublicTripInfoService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetPublicTripInfoHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetPublicTripInfoComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetPublicTripInfoQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetPublicTripInfoQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		<!-- (Step 4) Yu-Hsiang: XXXXX = GetAuthTripInfo -->
		<service name="GetAuthTripInfoService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetAuthTripInfoHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetAuthTripInfoComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetAuthTripInfoQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetAuthTripInfoQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		<!-- (Step 4) Yu-Hsiang: XXXXX = UploadTripComplete -->
		<service name="UploadTripCompleteService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashUploadTripCompleteHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="UploadTripComplete"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashUploadTripCompleteQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashUploadTripCompleteQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		<!-- (Step 4) Yu-Hsiang: XXXXX = CheckServerStatus -->
		<service name="CheckServerStatusService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashCheckServerStatusHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="CheckServerStatus"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashCheckServerStatusQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashCheckServerStatusQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		<!-- (Step 4) Yu-Hsiang: XXXXX = LocationSharing -->
		<service name="LocationSharingService">
			<!-- <inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashLocationSharingHttpsInboundEndpoint" />
			</inbound> -->
			<inbound>
				<http:inbound-endpoint transformer-refs="HttpPostParams"
					responseTransformer-refs="byteArrayToString" ref="plashLocationSharingHttpsInboundEndpoint" />
			</inbound>						
			<component>
				<spring-object bean="LocationSharingComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashLocationSharingQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashLocationSharingQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>


		<service name="NearbyTripService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashNearbyTripHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="NearbyTripComponent"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashNearbyTripQueue">
						<transformers>
							<jms:object-to-jmsmessage-transformer />
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashNearbyTripQueue">
					<transformers>
						<jms:jmsmessage-to-object-transformer />
						<transformer ref="TestResponseTransformer" />
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>



		<service name="NewTrajectoryInfoService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashNewTrajectoryInfoHttpsInboundEndpoint" />
			</inbound>   		
			<component>
				<spring-object bean="NewTrajectoryInfo"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashNewTrajectoryInfoQueue">
						<transformers>
				
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
	
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
		
				
			<async-reply>
				<inbound-endpoint ref="plashNewTrajectoryInfoQueue">
					<transformers>
						
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>	
								
		</service>
		
		<service name="NewUserSpecifiedService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashNewUserSpecifiedHttpsInboundEndpoint" />
			</inbound>   		
			<component>
				<spring-object bean="NewUserSpecified"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashNewUserSpecifiedQueue">
						<transformers>
				
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
	
						</transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>		
		
				
			<async-reply>
				<inbound-endpoint ref="plashNewUserSpecifiedQueue">
					<transformers>
						
					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>	
								
		</service>
					

		<service name="pingService">
			<inbound>
				<http:inbound-endpoint
					address="http://localhost:8085/ping"
					synchronous="true">
					<response-transformers>
						<expression-transformer>
							<return-argument evaluator="string" expression="PONG" />
						</expression-transformer>
					</response-transformers>
				</http:inbound-endpoint>
			</inbound>
		</service>
		<!-- @mikelin -->
		 <service name="NewLinkusUserInfoService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashNewLinkusUserInfoHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="NewLinkusUserInfo"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashNewLinkusUserInfoQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
					    </transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashNewLinkusUserInfoQueue">
					<transformers>

					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<service name="NewLinkusPhotosService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashNewLinkusPhotosHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="NewLinkusPhotos"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashNewLinkusPhotosQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
					    </transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashNewLinkusPhotosQueue">
					<transformers>

					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
	
	<service name="NewLinkusLocationsService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashNewLinkusLocationsHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="NewLinkusLocations"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashNewLinkusLocationsQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
					    </transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashNewLinkusLocationsQueue">
					<transformers>

					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
	<service name="GetLinkusUserService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashGetLinkusUserHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="GetLinkusUser"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashGetLinkusUserQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
					    </transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashGetLinkusUserQueue">
					<transformers>

					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
		
		<service name="NewLinkusInteractionService">
			<inbound>
				<inbound-endpoint transformer-refs="HttpParams"
					responseTransformer-refs="byteArrayToString" ref="plashNewLinkusInteractionHttpsInboundEndpoint" />
			</inbound>			
			<component>
				<spring-object bean="NewLinkusInteraction"></spring-object>
			</component>
			<outbound>
				<pass-through-router>
					<outbound-endpoint ref="plashNewLinkusInteractionQueue">
						<transformers>
							<transformer ref="PlashPlatformTransformer" />						
							<jms:object-to-jmsmessage-transformer />
					    </transformers>
					</outbound-endpoint>
				</pass-through-router>
			</outbound>
			<async-reply>
				<inbound-endpoint ref="plashNewLinkusInteractionQueue">
					<transformers>

					</transformers>
				</inbound-endpoint>
				<single-async-reply-router/>				
			</async-reply>
		</service>
						
	</model>


</mule>
